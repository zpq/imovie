{
  "name": "dev",
  "description": "Reruns the given file whenever the current working dir subtree has modifications.",
  "version": "0.1.3",
  "repository": {
    "type": "git",
    "url": "git://github.com/iliakan/node-dev.git"
  },
  "author": {
    "name": "Ilya Kantor",
    "email": "iliakan@gmail.com",
    "url": "http://javascript.info/"
  },
  "preferGlobal": true,
  "bin": {
    "node-dev": "./node-dev.sh"
  },
  "dependencies": {
    "inotify": ">= 0.1.6"
  },
  "readme": "# What does it do?\n\nIt autoreloads Node.JS in case of any file changes. \n\n\n    $ npm install dev -g\n\n    $ node-dev app.js\n\n    Starting: app.js\n    > server is listening on http://127.0.0.1:8080</pre>\n\n`node-dev` will rerun `app.js` whenever one of the watched files is\nchanged.\n\nThe module is based on inotify. So, unlike most other modules of this kind, *it starts watching new files automatically*. \n\nA number of additional options make the module really flexible and extendible.\n\n## Install\n\n`npm install dev -g`\n\nGlobal installation is preferred to have `node-dev` utility in path.\n\n### Advanced usage\n\nThe `node-dev` is a tiny file which basically contains:\n\n    var manager = require(\"dev\")(options);\n    manager.start();\n\n\nThe options are:\n\n#### Running\n\n- `run`: the js file to run, e.g `./app.js`, it is the only required option.\n\n#### Watch/Ignore\n\n- `watchDir`: the folder to watch recursively, default: `.`\n- `ignoredPaths` [ paths ]: array of ignored paths, which are not watched, members can be:\n    * `string`, matched exactly against path, like `./public`,\n    * `RegExp`, e.g an extension check: `/\\.gif$/`\n    * `function(path)`, which takes the path and returns `true` if it should be ignored\n\n#### Logging\n- `debug`: enables additional logging output about watches and changes, default: `false`\n- `logger`: custom logger object, must have `error(...)` and `debug(...)` methods, delegates to `console.log` by default. Can use any other logger.\n\n#### Info\n- `onRunOutput`: callback `function(output)`, called for `stdout` data from the running process\n- `onRunError`: callback `function(output)`, called for `stderr` data from the running process\n\nYou can use these to send error notifications and integrate with your development environment if you wish.\n\n### Troubleshooting\n\nThere are limits on the number of watched files in inotify.\nSo make sure that you only watch <i>your modules</i>, not all 3rd-party npm stuff.\n\nTo change the limit:\n\n    $ echo 16384 > /proc/sys/fs/inotify/max_user_watches\n\nOr:\n\n    $ sudo sysctl fs.inotify.max_user_watches=16364\n\nTo make the change permanent, edit the file `/etc/sysctl.conf` and add this line to the end of the file:\n\n    fs.inotify.max_user_watches=16384\n\n\n### TODO\n\nTell me which features you miss?\n\nUse Github issue tracker for that.\n\nThank you.\n\n",
  "readmeFilename": "readme.md",
  "bugs": {
    "url": "https://github.com/iliakan/node-dev/issues"
  },
  "_id": "dev@0.1.3",
  "dist": {
    "shasum": "2bc86cca1a3eca12459242c7f25388dcc5d1045e"
  },
  "_from": "dev@",
  "_resolved": "https://registry.npmjs.org/dev/-/dev-0.1.3.tgz"
}
